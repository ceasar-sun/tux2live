#!/bin/bash

####################################################
# tux2live system builder
#
# Description: To build init ram disk for live system , part 1 of tux2live
# Last update :20070521
# Author:
#	Ceasar Sun <ceasar_at_nchc_org_tw>
#	
# License: GPL
####################################################

use_mkinitramfs (){
	
	local _this_verbose_par
	local _initramfs_tmpdir
	local _mkinitramfs_config_dir
	local _initramfs_skel

	_initramfs_skel=$_TUX2LIVE_ROOT_DIR/initramfs.skel

	_initramfs_tmpdir=initramfs-tools.tmp

	[ "$_VERBOSE" = "-v" ] && _this_verbose_par="-v" || _this_verbose_par=

	if [ -z "$($_PKG_COMM $_PKG_LISTALL_ARG | grep live-initramfs 2>/dev/null)"  -a -z "$($_PKG_COMM $_PKG_LISTALL_ARG | grep live-boot-initramfs-tools 2>/dev/null)"  ]; then
		$SETCOLOR_WARNING && echo "No live-initramfs package, use temporary initramfs config ..." && $SETCOLOR_NORMAL
		_initramfs_rootdir="$(find /etc/ -name  initramfs.conf 2> /dev/null | head| xargs dirname )"
		if [  -n "$_initramfs_rootdir" -a -d "$_initramfs_rootdir" -a -f "$_initramfs_rootdir/modules" ]; then
			[ -d "$_TUX2LIVE_OUTPUT_DIR/$_initramfs_tmpdir" ] && rm -rf $_TUX2LIVE_OUTPUT_DIR/$_initramfs_tmpdir
			cp -a $_initramfs_rootdir $_TUX2LIVE_OUTPUT_DIR/$_initramfs_tmpdir

			$SETCOLOR_WARNING && echo "Add necessary modules into '$_initramfs_tmpdir/modules' ..." && $SETCOLOR_NORMAL
			echo "squashfs" >> $_TUX2LIVE_OUTPUT_DIR/$_initramfs_tmpdir/modules
			echo "aufs" >> $_TUX2LIVE_OUTPUT_DIR/$_initramfs_tmpdir/modules

			$SETCOLOR_WARNING && echo "Add necessary scrips for live into '$_initramfs_tmpdir/scripts' ..." && $SETCOLOR_NORMAL
			rsync -a $_this_verbose_par $_initramfs_skel/scripts/live* $_TUX2LIVE_OUTPUT_DIR/$_initramfs_tmpdir/scripts/

			_mkinitramfs_config_dir="-d $_TUX2LIVE_OUTPUT_DIR/$_initramfs_tmpdir"

		else 
			$SETCOLOR_FAILURE; echo "Can't find '$_initramfs_rootdir/modules' ??"; $SETCOLOR_NORMAL
			exit 1;
		fi

	fi

	echo "Use mkinitramfs to generate initrd ..."
	
	_mkinitrd_comm_line="mkinitramfs $_this_verbose_par `uname -r` $_mkinitramfs_config_dir -o $_TUX2LIVE_OUTPUT_DIR/$_TUX2LIVE_LIVECD_INITRD"
	[ "$_DEBUG" == "y" ] && DEBUG_MESSAGE "$_mkinitrd_comm_line"
	$_mkinitrd_comm_line
	[ "$_DEBUG" != "y" ] && rm -rf $_TUX2LIVE_OUTPUT_DIR/$_initramfs_tmpdir

	cp -f $_this_verbose_par /boot/vmlinuz-`uname -r` $_TUX2LIVE_OUTPUT_DIR/$_TUX2LIVE_LIVECD_KERNEL
}

use_vanilla () {

	local _answer;

	# Default setting (can't be changed by command-line options)
	_initrd_skel=$_TUX2LIVE_ROOT_DIR/initrd-live.skel

	kernel_ver=`uname -r`
	_initrd_insmod=$_MKINITRD_INITRD_INSMOD
	initfs_type=$_MKINITRD_INITFS_TYPE

	[ "$_BATCH_MODE" = 'n' ] && ($SETCOLOR_WARNING; echo -n "Start to creat initrd ? [Y/n]"; $SETCOLOR_NORMAL; read _answer) || ( $SETCOLOR_WARNING; echo "**** Start to creat initrd ****"; $SETCOLOR_NORMAL )
	[ "$_answer" = "n" ] && echo "Bye !!" && exit 1;

	[ ! -d "$_initrd_skel" ] && echo "Errot: no initrd-skel dir !!!" && exit 1;
	[ ! -d "$_TUX2LIVE_OUTPUT_DIR" ] && mkdir $_TUX2LIVE_OUTPUT_DIR
	[ ! -d "$_TUX2LIVE_TMP_DIR" ] && mkdir $_TUX2LIVE_TMP_DIR
	[ ! -z "$_INITRD_INSMO" ] && _initrd_insmod=$_INITRD_INSMO
	# Clean up old vmlinz and initrd
	[ -f "$_TUX2LIVE_OUTPUT_DIR/$_TUX2LIVE_LIVECD_KERNEL" ] && rm -rf $_TUX2LIVE_OUTPUT_DIR/$_TUX2LIVE_LIVECD_KERNEL && echo "Erase old vmlinuz:$_TUX2LIVE_OUTPUT_DIR/$_TUX2LIVE_LIVECD_KERNEL ..."
	[ -f "$_TUX2LIVE_OUTPUT_DIR/$_TUX2LIVE_LIVECD_INITRD" ] && rm -rf $_TUX2LIVE_OUTPUT_DIR/$_TUX2LIVE_LIVECD_INITRD && echo "Erase old initrd: $_TUX2LIVE_OUTPUT_DIR/$_TUX2LIVE_LIVECD_INITRD"

	# Create temporary working files
	initrd=`mktemp -d $_TUX2LIVE_TMP_DIR/initrd.XXXXXX`
	initrdimg=`mktemp $_TUX2LIVE_TMP_DIR/initrd.img.XXXXXX`
	initrdmnt=`mktemp -d $_TUX2LIVE_TMP_DIR/initrd.mnt.XXXXXX`

	# Copy skeleton into temporary area
	echo "Copy initrd skeleton of '$kernel_ver' for live system booting ..."
	cp -a $_initrd_skel/* $initrd/
	# remove initrd/scripts/casper-bottom/* in RH/MDK like 
	if [ -e /etc/debian_version ]; then
		# Debian
		BUILD_SYSTEM=$(head -n 1 /etc/issue | awk '{print $1}')
	elif [ -e /etc/SuSE-release ]; then
		# Suse
		BUILD_SYSTEM=Suse
	else 
		# RH-like
		BUILD_SYSTEM=$(head -n 1 /etc/issue | awk '{print $1}')
		rm -rf $initrd/scripts/casper-bottom/*
	fi
	
	cat > $initrd/etc/casper.conf<<EOF
# This file is auto-generated by tus2live-mkinitrd
export TUX2LIVE_VERSION="$_TUX2LIVE_VERSION"
export USERNAME="$_TUX2LIVE_LIVECD_USERNAME"
export USERFULLNAME="Live session user"
export HOSTNAME="$_TUX2LIVE_LIVECD_HOSTNAME"
export BUILD_SYSTEM="$BUILD_SYSTEM"
export ROOTFS_METHOD="$_TUX2LIVE_ROOTFS_METHOD"
EOF
	mkdir -p $initrd/lib/modules/$kernel_ver
	# put 2nd search pci table from kernel
	cp -f /lib/modules/$kernel_ver/modules.pcimap $initrd/etc

	echo "Use kernel modules from /lib/modules/$kernel_ver."

	# check if /boot/config-$kernel_ver exists
	# By Blake Huang, modified by Steven Shiau.
	# kernel config is either in /boot/ or /tftpboot/node_root/boot
	kernel_config="/boot/config-$kernel_ver"

	# decided the initfs type
	if [ -n "$initfs_type" ]; then
	  # initfs_type is assigned
	  # format the initfs_type
	  case "$initfs_type" in
	   ext2|EXT2) 
	     if [ -z "$(grep "^CONFIG_EXT2_FS=y" $kernel_config)" ]; then
	       [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
	       echo "EXT2 is NOT builtin (maybe module) in the kernel $kernel_ver (Check $kernel_config for more details)!"
	       [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
	       echo "Program terminated!!!"
	       exit 1
	     fi
	     initfs_type="EXT2" ;;
	   cramfs|CRAMFS) 
	     if [ -z "$(grep "^CONFIG_CRAMFS=y" $kernel_config)" ]; then
	       [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
	       echo "CRAMFS is NOT builtin (maybe module) in the kernel $kernel_ver (Check $kernel_config for more details)!"
	       [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
	       echo "Program terminated!!!"
	       exit 1
	     fi
	     initfs_type="CRAMFS" ;;
	   initramfs|INITRAMFS) 
	     if [ -z "$(echo "$kernel_ver" | grep -E "^2\.6\.")" ]; then
	       [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
	       echo "initramfs only works for kernel 2.6!"
	       [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
	       echo "Program terminated!!!"
	       exit 1
	     fi
	     initfs_type="INITRAMFS" ;;
	   *) echo $USAGE && exit 2;;
	  esac
	else
	  # initfs_type is not assigned, try to find it
	  if [ ! -f $kernel_config ]; then 
	    [ "$BOOTUP" = "color" ] && $SETCOLOR_WARNING
	    echo "$kernel_config does NOT exist!"
	    echo "I can not judge either filesystem CRAMFS or EXT2 is builtin (NOT module) in the kernel you are using!!!"
	    echo "We will assume that the kernel you are using can use initramfs!"
	    [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
	    if [ -z "$(echo "$kernel_ver" | grep -E "^2\.6\.")" ]; then
	      [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
	      echo "initramfs only works for kernel 2.6!"
	      [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
	      echo "Program terminated!!!"
	      exit 1
	    fi
	    initfs_type="INITRAMFS"
	  else
	    # we assume the the priority is higher for EXT2, i.e. EXT2 option will overwrite the CRAMFS.
	    [ -n "$(grep "^CONFIG_CRAMFS=y" $kernel_config)" ] && initfs_type="CRAMFS"
	    [ -n "$(grep "^CONFIG_EXT2_FS=y" $kernel_config)" ] && initfs_type="EXT2"
	    if [ -z "$initfs_type" ]; then
	      if [ -z "$(echo "$kernel_ver" | grep -E "^2\.6\.")" ]; then
	        [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
	        echo "initramfs only works for kernel 2.6!"
	        [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
	        echo "Program terminated!!!"
	        exit 1
	      fi
	      [ "$BOOTUP" = "color" ] && $SETCOLOR_WARNING
	      echo "$kernel_config is found but either CRAMFS or EXT2 filesystem is NOT builtin in the kernel. We will use initramfs."
	      [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
	      initfs_type="INITRAMFS"
	    fi
	  fi
	fi

	# But we can have a better method:
	# In kernel 2.4.26 or later, we need the lib/mldules/$kernel_ver/kernel/lib also
	if [ -n "$(echo $kernel_ver | grep "^2\.4\.")" ]; then
	  # for kernel 2.4.x, we use this ugly method, since tar has "--exclude" option
	  echo "Not support for kernel 2.4";
	  exit 1;
	  #(cd /lib/modules/$kernel_ver && tar cplf - modules.*  kernel/net/sunrpc* kernel/fs/nfs* kernel/fs/lockd* kernel/net/packet kernel/drivers/net kernel/drivers/base kernel/lib --exclude appletalk --exclude fc --exclude hamradio --exclude irda --exclude pcmcia --exclude tokenring --exclude wan --exclude wireless --exclude wireless_old 2>/dev/null) | ( cd $initrd/lib/modules/$kernel_ver && tar xpf -)
	elif [ -n "$(echo $kernel_ver | grep "^2\.6\.")" ]; then
	  # for kernel 2.6.x, we have better method	 

	   cp -a $VERBOSE /lib/modules/$kernel_ver/modules.* $initrd/lib/modules/$kernel_ver/ 2>/dev/null

		echo -n "Copy modules -->"
		for m in $_initrd_insmod; do
			echo -e -n "\t~/$m ..."
			[ -e "/lib/modules/$kernel_ver/$m" ] && ( cp -a $VERBOSE --parents /lib/modules/$kernel_ver/$m  $initrd/ 2>/dev/null && echo -n "+  " ) || echo -n "skip  "
			#[ -f "/lib/modules/$kernel_ver/$m" ] && ( cp -a $VERBOSE --parents /lib/modules/$kernel_ver/$m  $initrd/ 2>/dev/null && echo -n "+  " ) || echo -n "skip  "
	   done
		echo "  -- done"
	else 
	  echo "Kernel $kernel_ver is not supported! Program terminated!"
	  exit 1
	fi

	# uncompress module if need
	find $initrd/lib/modules/$kernel_ver/ -name "*.o.gz" -exec gunzip {} \;
	find $initrd/lib/modules/$kernel_ver/ -name "*.ko.gz" -exec gunzip {} \;

	# rename the module names in modules.dep from *.o.gz to *.o,
	# This is specially for Mandrake
	perl -pi -e 's/(.[k]*o).gz/$1/g' $initrd/lib/modules/$kernel_ver/modules.dep

	# copy the kernel to output_dir first.
	cp -f $VERBOSE /boot/vmlinuz-$kernel_ver $_TUX2LIVE_OUTPUT_DIR/$_TUX2LIVE_LIVECD_KERNEL
	# To create initrd with CRAMFS or EXT2
	case "$initfs_type" in
	 "CRAMFS")
	   # CRAMFS
	   echo "Creating the CRAMFS initrd..."   
	   # initrd image looks for /linuxrc instead of /init
	   mv -f $initrd/linuxrc-or-init $initrd/linuxrc
	   # create initrd using cramfs
	   mkcramfs $initrd $_TUX2LIVE_OUTPUT_DIR/$_TUX2LIVE_LIVECD_INITRD
	   [ "$_VERBOSE" = "-v" ] && echo "The output initrd is $_TUX2LIVE_OUTPUT_DIR/$_TUX2LIVE_LIVECD_INITRD" 
	   ;;
	 "EXT2")
	   # EXT2
	   # Create empty ext2fs image file
	   echo "Creating the EXT2 initrd..."
	   dd if=/dev/zero bs=1k of=$initrdimg count=$((`du -sk $initrd | cut -f1` * 7 / 6)) 2> /dev/null
	   /sbin/mke2fs -q -F $initrdimg 2> /dev/null
	   
	   # Mount image file, copy files on, create /dev entries, display free space, umount
	   sudo mount -o loop $initrdimg $initrdmnt
	   cp -a $initrd/* $initrdmnt/
	   # initrd image looks for /linuxrc instead of /init
	   mv -f $initrdmnt/linuxrc-or-init $initrdmnt/linuxrc

	   sudo umount $initrdmnt
	   
	   # Create output file
	   [ "$_VERBOSE" = "-v" ] && echo "The output initrd is $_TUX2LIVE_OUTPUT_DIR/$_TUX2LIVE_LIVECD_INITRD" 
	   gzip -9 -n -c $initrdimg > $_TUX2LIVE_OUTPUT_DIR/initrd-$initrd_suffix.img
	   ;;
	 "INITRAMFS")
	   # initramfs
	   echo -n "Creating the initramfs image..."
	   # create initrd using initramfs
	   # initRAMFS image looks for /init instead of /linuxrc
	   mv -f $initrd/linuxrc-or-init $initrd/init
	    (
	    cd $initrd ;find . | cpio --quiet -o -H newc | gzip -9 >  $_TUX2LIVE_OUTPUT_DIR/$_TUX2LIVE_LIVECD_INITRD
	    )
		echo "done"
	   [ "$_VERBOSE" = "-v" ] && echo "The output initrd is $_TUX2LIVE_OUTPUT_DIR/$_TUX2LIVE_LIVECD_INITRD" 
	   ;;
	esac

	# Keep
	if [ "$_DEBUG" != "y" ]; then
	  rm -rf $initrd
	  rm -rf $initrdimg
	  rm -rf $initrdmnt
	fi
}

tux2mkinitrd () {
	# Load Tux2live setting and functions
	#[ -f "$_TUX2LIVE_ROOT_DIR/conf/tux2live.conf" ] && [ -z "$_LOAD_TUX2LIVE_CONF" ] && . $_TUX2LIVE_ROOT_DIR/conf/tux2live.conf

	if [  "$_TUX2LIVE_ROOTFS_METHOD" = "aufs" ]; then
	#if [ "$_TUX2LIVE_ROOTFS_METHOD" = "aufs" ]; then
		use_mkinitramfs
	else 	
		use_vanilla 
	fi	
	return 0
}

